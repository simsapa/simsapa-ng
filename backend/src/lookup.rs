use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref DHP_CHAPTERS_TO_RANGE: HashMap<u32, (u32, u32)> = {
        let mut m = HashMap::new();
        m.insert(1, (1, 20));
        m.insert(2, (21, 32));
        m.insert(3, (33, 43));
        m.insert(4, (44, 59));
        m.insert(5, (60, 75));
        m.insert(6, (76, 89));
        m.insert(7, (90, 99));
        m.insert(8, (100, 115));
        m.insert(9, (116, 128));
        m.insert(10, (129, 145));
        m.insert(11, (146, 156));
        m.insert(12, (157, 166));
        m.insert(13, (167, 178));
        m.insert(14, (179, 196));
        m.insert(15, (197, 208));
        m.insert(16, (209, 220));
        m.insert(17, (221, 234));
        m.insert(18, (235, 255));
        m.insert(19, (256, 272));
        m.insert(20, (273, 289));
        m.insert(21, (290, 305));
        m.insert(22, (306, 319));
        m.insert(23, (320, 333));
        m.insert(24, (334, 359));
        m.insert(25, (360, 382));
        m.insert(26, (383, 423));
        m
    };

    // v1 - v120 are thag1.x
    pub static ref THAG_UID_TO_RANGE: HashMap<&'static str, (u32, u32)> = {
        let mut m = HashMap::new();
        m.insert("thag2.1", (121, 122));
        m.insert("thag2.2", (123, 124));
        m.insert("thag2.3", (125, 126));
        m.insert("thag2.4", (127, 128));
        m.insert("thag2.5", (129, 130));
        m.insert("thag2.6", (131, 132));
        m.insert("thag2.7", (133, 134));
        m.insert("thag2.8", (135, 136));
        m.insert("thag2.9", (137, 138));
        m.insert("thag2.10", (139, 140));
        m.insert("thag2.11", (141, 142));
        m.insert("thag2.12", (143, 144));
        m.insert("thag2.13", (145, 146));
        m.insert("thag2.14", (147, 148));
        m.insert("thag2.15", (149, 150));
        m.insert("thag2.16", (151, 152));
        m.insert("thag2.17", (153, 154));
        m.insert("thag2.18", (155, 156));
        m.insert("thag2.19", (157, 158));
        m.insert("thag2.20", (159, 160));
        m.insert("thag2.21", (161, 162));
        m.insert("thag2.22", (163, 164));
        m.insert("thag2.23", (165, 166));
        m.insert("thag2.24", (167, 168));
        m.insert("thag2.25", (169, 170));
        m.insert("thag2.26", (171, 172));
        m.insert("thag2.27", (173, 174));
        m.insert("thag2.28", (175, 176));
        m.insert("thag2.29", (177, 178));
        m.insert("thag2.30", (179, 180));
        m.insert("thag2.31", (181, 182));
        m.insert("thag2.32", (183, 184));
        m.insert("thag2.33", (185, 186));
        m.insert("thag2.34", (187, 188));
        m.insert("thag2.35", (189, 190));
        m.insert("thag2.36", (191, 192));
        m.insert("thag2.37", (193, 194));
        m.insert("thag2.38", (195, 196));
        m.insert("thag2.39", (197, 198));
        m.insert("thag2.40", (199, 200));
        m.insert("thag2.41", (201, 202));
        m.insert("thag2.42", (203, 204));
        m.insert("thag2.43", (205, 206));
        m.insert("thag2.44", (207, 208));
        m.insert("thag2.45", (209, 210));
        m.insert("thag2.46", (211, 212));
        m.insert("thag2.47", (213, 214));
        m.insert("thag2.48", (215, 216));
        m.insert("thag2.49", (217, 218));
        m.insert("thag3.1", (219, 221));
        m.insert("thag3.2", (222, 224));
        m.insert("thag3.3", (225, 227));
        m.insert("thag3.4", (228, 230));
        m.insert("thag3.5", (231, 233));
        m.insert("thag3.6", (234, 236));
        m.insert("thag3.7", (237, 239));
        m.insert("thag3.8", (240, 242));
        m.insert("thag3.9", (243, 245));
        m.insert("thag3.10", (246, 248));
        m.insert("thag3.11", (249, 251));
        m.insert("thag3.12", (252, 254));
        m.insert("thag3.13", (255, 257));
        m.insert("thag3.14", (258, 260));
        m.insert("thag3.15", (261, 263));
        m.insert("thag3.16", (264, 266));
        m.insert("thag4.1", (267, 270));
        m.insert("thag4.2", (271, 274));
        m.insert("thag4.3", (275, 278));
        m.insert("thag4.4", (279, 282));
        m.insert("thag4.5", (283, 286));
        m.insert("thag4.6", (287, 290));
        m.insert("thag4.7", (291, 294));
        m.insert("thag4.8", (295, 298));
        m.insert("thag4.9", (299, 302));
        m.insert("thag4.10", (303, 306));
        m.insert("thag4.11", (307, 310));
        m.insert("thag4.12", (311, 314));
        m.insert("thag5.1", (315, 319));
        m.insert("thag5.2", (320, 324));
        m.insert("thag5.3", (325, 329));
        m.insert("thag5.4", (330, 334));
        m.insert("thag5.5", (335, 339));
        m.insert("thag5.6", (340, 344));
        m.insert("thag5.7", (345, 349));
        m.insert("thag5.8", (350, 354));
        m.insert("thag5.9", (355, 359));
        m.insert("thag5.10", (360, 364));
        m.insert("thag5.11", (365, 369));
        m.insert("thag5.12", (370, 374));
        m.insert("thag6.1", (375, 380));
        m.insert("thag6.2", (381, 386));
        m.insert("thag6.3", (387, 392));
        m.insert("thag6.4", (393, 398));
        m.insert("thag6.5", (399, 404));
        m.insert("thag6.6", (405, 410));
        m.insert("thag6.7", (411, 416));
        m.insert("thag6.8", (417, 422));
        m.insert("thag6.9", (423, 428));
        m.insert("thag6.10", (429, 434));
        m.insert("thag6.11", (435, 440));
        m.insert("thag6.12", (441, 446));
        m.insert("thag6.13", (447, 452));
        m.insert("thag6.14", (453, 458));
        m.insert("thag7.1", (459, 465));
        m.insert("thag7.2", (466, 472));
        m.insert("thag7.3", (473, 479));
        m.insert("thag7.4", (480, 486));
        m.insert("thag7.5", (487, 493));
        m.insert("thag8.1", (494, 501));
        m.insert("thag8.2", (502, 509));
        m.insert("thag8.3", (510, 517));
        m.insert("thag9.1", (518, 526));
        m.insert("thag10.1", (527, 536));
        m.insert("thag10.2", (537, 546));
        m.insert("thag10.3", (547, 556));
        m.insert("thag10.4", (557, 566));
        m.insert("thag10.5", (567, 576));
        m.insert("thag10.6", (577, 586));
        m.insert("thag10.7", (587, 596));
        m.insert("thag11.1", (597, 607));
        m.insert("thag12.1", (608, 619));
        m.insert("thag12.2", (620, 631));
        m.insert("thag13.1", (632, 644));
        m.insert("thag14.1", (645, 658));
        m.insert("thag14.2", (659, 672));
        m.insert("thag15.1", (673, 688));
        m.insert("thag15.2", (689, 704));
        m.insert("thag16.1", (705, 725));
        m.insert("thag16.2", (726, 746));
        m.insert("thag16.3", (747, 768));
        m.insert("thag16.4", (769, 793));
        m.insert("thag16.5", (794, 817));
        m.insert("thag16.6", (818, 841));
        m.insert("thag16.7", (842, 865));
        m.insert("thag16.8", (866, 891));
        m.insert("thag16.9", (892, 919));
        m.insert("thag16.10", (920, 948));
        m.insert("thag17.1", (949, 980));
        m.insert("thag17.2", (981, 1017));
        m.insert("thag17.3", (1018, 1050));
        m.insert("thag18.1", (1051, 1090));
        m.insert("thag19.1", (1091, 1145));
        m.insert("thag20.1", (1146, 1208));
        m.insert("thag21.1", (1209, 1279));
        m
    };

    // v1 - v18 are thig1.x
    pub static ref THIG_UID_TO_RANGE: HashMap<&'static str, (u32, u32)> = {
        let mut m = HashMap::new();
        m.insert("thig2.1", (19, 20));
        m.insert("thig2.2", (21, 22));
        m.insert("thig2.3", (23, 24));
        m.insert("thig2.4", (25, 26));
        m.insert("thig2.5", (27, 28));
        m.insert("thig2.6", (29, 30));
        m.insert("thig2.7", (31, 32));
        m.insert("thig2.8", (33, 34));
        m.insert("thig2.9", (35, 36));
        m.insert("thig3.1", (37, 38));
        m.insert("thig3.2", (39, 41));
        m.insert("thig3.3", (42, 44));
        m.insert("thig3.4", (45, 47));
        m.insert("thig3.5", (48, 50));
        m.insert("thig3.6", (51, 53));
        m.insert("thig3.7", (54, 56));
        m.insert("thig3.8", (57, 59));
        m.insert("thig3.9", (60, 62));
        m.insert("thig4.1", (63, 66));
        m.insert("thig5.1", (67, 71));
        m.insert("thig5.2", (72, 76));
        m.insert("thig5.3", (77, 81));
        m.insert("thig5.4", (82, 86));
        m.insert("thig5.5", (87, 91));
        m.insert("thig5.6", (92, 96));
        m.insert("thig5.7", (97, 101));
        m.insert("thig5.8", (102, 106));
        m.insert("thig5.9", (107, 111));
        m.insert("thig5.10", (112, 116));
        m.insert("thig5.11", (117, 121));
        m.insert("thig5.12", (122, 126));
        m.insert("thig6.1", (127, 132));
        m.insert("thig6.2", (139, 144));
        m.insert("thig6.3", (133, 139));
        m.insert("thig6.4", (145, 150));
        m.insert("thig6.5", (151, 156));
        m.insert("thig6.6", (157, 162));
        m.insert("thig6.7", (163, 168));
        m.insert("thig6.8", (169, 174));
        m.insert("thig7.1", (175, 181));
        m.insert("thig7.2", (182, 188));
        m.insert("thig7.3", (189, 195));
        m.insert("thig8.1", (196, 203));
        m.insert("thig9.1", (204, 212));
        m.insert("thig10.1", (213, 223));
        m.insert("thig11.1", (224, 235));
        m.insert("thig12.1", (236, 251));
        m.insert("thig13.1", (252, 270));
        m.insert("thig13.2", (271, 290));
        m.insert("thig13.3", (291, 311));
        m.insert("thig13.4", (312, 337));
        m.insert("thig13.5", (338, 365));
        m.insert("thig14.1", (366, 399));
        m.insert("thig15.1", (400, 447));
        m.insert("thig16.1", (448, 522));
        m
    };

    // https://www.digitalpalireader.online/_dprhtml/index.html?loc=k.4.m
    pub static ref SNP_UID_TO_RANGE: HashMap<&'static str, (u32, u32)> = {
        let mut m = HashMap::new();
        m.insert("snp1.1", (1, 17));
        m.insert("snp1.2", (18, 34));
        m.insert("snp1.3", (35, 75));
        m.insert("snp1.4", (76, 82));
        m.insert("snp1.5", (83, 90));
        m.insert("snp1.6", (91, 115));
        m.insert("snp1.7", (116, 142));
        m.insert("snp1.8", (143, 152));
        m.insert("snp1.9", (153, 182));
        m.insert("snp1.10", (183, 194));
        m.insert("snp1.11", (195, 208));
        m.insert("snp1.12", (209, 223));
        m.insert("snp2.1", (224, 241));
        m.insert("snp2.2", (242, 255));
        m.insert("snp2.3", (256, 260));
        m.insert("snp2.4", (261, 272));
        m.insert("snp2.5", (273, 275));
        m.insert("snp2.6", (276, 285));
        m.insert("snp2.7", (286, 317));
        m.insert("snp2.8", (318, 325));
        m.insert("snp2.9", (326, 332));
        m.insert("snp2.10", (333, 336));
        m.insert("snp2.11", (337, 344));
        m.insert("snp2.12", (345, 360));
        m.insert("snp2.13", (361, 377));
        m.insert("snp2.14", (378, 406));
        m.insert("snp3.1", (407, 426));
        m.insert("snp3.2", (427, 451));
        m.insert("snp3.3", (452, 456));
        m.insert("snp3.4", (457, 490));
        m.insert("snp3.5", (491, 514));
        m.insert("snp3.6", (515, 552));
        m.insert("snp3.7", (553, 578));
        m.insert("snp3.8", (579, 598));
        m.insert("snp3.9", (599, 661));
        m.insert("snp3.10", (662, 683));
        m.insert("snp3.11", (684, 728));
        m.insert("snp3.12", (729, 771));
        m.insert("snp4.1", (772, 777));
        m.insert("snp4.2", (778, 785));
        m.insert("snp4.3", (786, 793));
        m.insert("snp4.4", (794, 801));
        m.insert("snp4.5", (802, 809));
        m.insert("snp4.6", (810, 819));
        m.insert("snp4.7", (820, 829));
        m.insert("snp4.8", (830, 840));
        m.insert("snp4.9", (841, 853));
        m.insert("snp4.10", (854, 867));
        m.insert("snp4.11", (868, 883));
        m.insert("snp4.12", (884, 900));
        m.insert("snp4.13", (901, 920));
        m.insert("snp4.14", (921, 940));
        m.insert("snp4.15", (941, 960));
        m.insert("snp4.16", (961, 981));
        m.insert("snp5.1", (982, 1037));
        m.insert("snp5.2", (1038, 1045));
        m.insert("snp5.3", (1046, 1048));
        m.insert("snp5.4", (1049, 1054));
        m.insert("snp5.5", (1055, 1066));
        m.insert("snp5.6", (1067, 1074));
        m.insert("snp5.7", (1075, 1082));
        m.insert("snp5.8", (1083, 1089));
        m.insert("snp5.9", (1090, 1093));
        m.insert("snp5.10", (1094, 1097));
        m.insert("snp5.11", (1098, 1101));
        m.insert("snp5.12", (1102, 1106));
        m.insert("snp5.13", (1107, 1110));
        m.insert("snp5.14", (1111, 1117));
        m.insert("snp5.15", (1118, 1121));
        m.insert("snp5.16", (1122, 1125));
        m.insert("snp5.17", (1126, 1129));
        m.insert("snp5.18", (1130, 1136));
        m.insert("snp5.19", (1137, 1155));
        m
    };

    // LET docs = (FOR x IN language RETURN [x._key, x.name]) RETURN docs
    pub static ref LANG_CODE_TO_NAME: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("lzh", "Chinese");
        m.insert("pli", "Pāli");
        m.insert("san", "Sanskrit");
        m.insert("xct", "Tibetan");
        m.insert("pgd", "Gāndhārī");
        m.insert("pra", "Prākrit");
        m.insert("uig", "Uighur");
        m.insert("kho", "Khotanese");
        m.insert("xto", "Tocharian A");
        m.insert("af", "Afrikaans");
        m.insert("ar", "Arabic");
        m.insert("au", "Aurebesh");
        m.insert("bn", "Bengali");
        m.insert("ca", "Català");
        m.insert("cs", "Čeština");
        m.insert("ev", "Sindarin");
        m.insert("kln", "Klingon");
        m.insert("vu", "Vulcan");
        m.insert("es", "Español");
        m.insert("fa", "Farsi");
        m.insert("fi", "Suomi");
        m.insert("haw", "ʻŌlelo Hawaiʻi");
        m.insert("he", "Hebrew");
        m.insert("hi", "हिन्दी");
        m.insert("hr", "Hrvatski");
        m.insert("hu", "Magyar");
        m.insert("id", "Indonesian");
        m.insert("it", "Italiano");
        m.insert("jpn", "日本語");
        m.insert("kan", "ಕನ್ನಡ");
        m.insert("ko", "한국어/조선말");
        m.insert("nl", "Nederlands");
        m.insert("no", "Norsk");
        m.insert("ru", "Ру́сский язы́к");
        m.insert("si", "සිංහල");
        m.insert("sk", "Slovenčina");
        m.insert("sl", "Slovenščina");
        m.insert("sld", "Saarländisch");
        m.insert("sr", "Srpski");
        m.insert("sv", "Svenska");
        m.insert("ta", "தமிழ்");
        m.insert("th", "ไทย");
        m.insert("my", "မြန်မာဘာသာ");
        m.insert("mr", "मराठी");
        m.insert("ro", "Română");
        m.insert("la", "Latine");
        m.insert("lt", "Lietuvių Kalba");
        m.insert("gu", "ગુજરાતી");
        m.insert("de", "Deutsch");
        m.insert("pt", "Português");
        m.insert("en", "English");
        m.insert("fr", "Français");
        m.insert("vi", "Tiếng Việt");
        m.insert("zh", "汉语");
        m.insert("pl", "Polski");
        m
    };
}
