cmake_minimum_required(VERSION 3.24)

project(simsapadhammareader LANGUAGES CXX)

# Rust always links against non-debug Windows runtime on *-msvc targets
# Note it is best to set this on the command line to ensure all targets are consistent
# https://github.com/corrosion-rs/corrosion/blob/master/doc/src/common_issues.md#linking-debug-cc-libraries-into-rust-fails-on-windows-msvc-targets
# https://github.com/rust-lang/rust/issues/39016
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDLL")
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTORCC_OPTIONS --format-version 1)
list(APPEND CMAKE_AUTORCC_OPTIONS --compress-algo zlib)

set(CXXQT_QTCOMPONENTS Core Gui Qml QuickControls2 QuickTest Test QmlImportScanner)

list(APPEND app_components Widgets Quick)

list(APPEND qt_modules
        Qt::Core
        Qt::Gui
        Qt::Qml
        Qt::Network
        Qt::Widgets
        Qt::Quick
        Qt::QuickControls2)

if (ANDROID)
    set(qmake_path "$ENV{HOME}/Qt/6.8.3/android_x86_64/bin/qmake6")
    list(APPEND app_components WebView)
    list(APPEND qt_modules Qt::WebView)
elseif (IOS)
    set(Rust_CARGO_TARGET aarch64-apple-ios)
    set(qmake_path "$ENV{HOME}/Qt/6.8.3/ios/bin/qmake6")
    list(APPEND app_components WebView)
    list(APPEND qt_modules Qt::WebView)
elseif (APPLE)
    set(qmake_path "$ENV{HOME}/Qt/6.8.3/macos/bin/qmake6")
    list(APPEND app_components WebEngineQuick)
    list(APPEND qt_modules Qt::WebEngineQuick)
else()
    set(qmake_path "$ENV{HOME}/Qt/6.8.3/gcc_64/bin/qmake6")
    list(APPEND app_components WebEngineQuick)
    list(APPEND qt_modules Qt::WebEngineQuick)
endif()

find_package(Qt6 COMPONENTS ${CXXQT_QTCOMPONENTS} ${app_components})

find_package(CxxQt QUIET)
if(NOT CxxQt_FOUND)
    include(FetchContent)
    FetchContent_Declare(
        CxxQt
        GIT_REPOSITORY https://github.com/kdab/cxx-qt-cmake.git
        GIT_TAG 0.7
    )

    FetchContent_MakeAvailable(CxxQt)
endif()

# CXX-Qt (using Corrosion) creates a CMake target with the same name as the crate.
cxx_qt_import_crate(
    MANIFEST_PATH bridges/Cargo.toml 
    CRATES simsapa_bridges
    LOCKED
    QMAKE ${qmake_path}

    QT_MODULES ${qt_modules}
)

cxx_qt_import_qml_module(simsapa_qml_module
    URI "com.profoundlabs.simsapa"
    SOURCE_CRATE simsapa_bridges)

qt_add_resources(icons "assets/icons.qrc")

list(APPEND cpp_files
    cpp/main.cpp
    cpp/errors.cpp
    cpp/utils.cpp
    cpp/system_palette.cpp
    cpp/gui.cpp
    cpp/window_manager.cpp
    cpp/sutta_search_window.cpp
    cpp/download_appdata_window.cpp
    cpp/word_lookup_window.cpp)

list(APPEND app_files ${cpp_files} ${icons})

if (WIN32)
    set(app_icon_resource_windows "${CMAKE_CURRENT_SOURCE_DIR}/assets/icons/appicons/simsapa.rc")

    qt_add_executable(simsapadhammareader
        ${cpp_files}
        ${icons}
        ${app_icon_resource_windows})

elseif (APPLE)
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE simsapa.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/assets/icons/appicons/simsapa.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

    qt_add_executable(simsapadhammareader MACOSX_BUNDLE ${app_files} ${app_icon_macos})

elseif (ANDROID)
    list(APPEND android_files
        android/AndroidManifest.xml
        android/build.gradle
        android/gradle.properties
        android/gradlew
        android/gradlew.bat
        android/gradle/wrapper/gradle-wrapper.jar
        android/gradle/wrapper/gradle-wrapper.properties
        android/res/values/libs.xml
        android/res/xml/network_security_config.xml
        android/res/xml/qtprovider_paths.xml)

    qt_add_executable(simsapadhammareader ${app_files} ${android_files})

else()
    qt_add_executable(simsapadhammareader ${app_files})

endif()

set_target_properties(simsapadhammareader PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
    QT_ANDROID_PACKAGE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/android
)

# Link to the qml module, which in turn links to the Rust simsapa library
target_link_libraries(simsapadhammareader
    PRIVATE
        simsapa_qml_module
    PUBLIC
        simsapa_bridges
        ${qt_modules}
    )

# If we are using a statically linked Qt then we need to import any qml plugins
qt_import_qml_plugins(simsapadhammareader)
